/*--------------------------------------------------------------------------------------
 *  Copyright 2025 Glass Devtools, Inc. All rights reserved.
 *  Licensed under the Apache License, Version 2.0. See LICENSE.txt for more information.
 *--------------------------------------------------------------------------------------*/
import { promisify } from 'util';
import { exec as _exec } from 'child_process';
const exec = promisify(_exec);
//8000 and 10 were chosen after some experimentation on small-to-moderately sized changes
const MAX_DIFF_LENGTH = 8000;
const MAX_DIFF_FILES = 10;
const git = async (command, path) => {
    const { stdout, stderr } = await exec(`${command}`, { cwd: path });
    if (stderr) {
        throw new Error(stderr);
    }
    return stdout.trim();
};
const getNumStat = async (path, useStagedChanges) => {
    const staged = useStagedChanges ? '--staged' : '';
    const output = await git(`git diff --numstat ${staged}`, path);
    return output
        .split('\n')
        .map((line) => {
        const [added, removed, file] = line.split('\t');
        return {
            file,
            added: parseInt(added, 10) || 0,
            removed: parseInt(removed, 10) || 0,
        };
    });
};
const getSampledDiff = async (file, path, useStagedChanges) => {
    const staged = useStagedChanges ? '--staged' : '';
    const diff = await git(`git diff --unified=0 --no-color ${staged} -- "${file}"`, path);
    return diff.slice(0, MAX_DIFF_LENGTH);
};
const hasStagedChanges = async (path) => {
    const output = await git('git diff --staged --name-only', path);
    return output.length > 0;
};
export class VoidSCMService {
    async gitStat(path) {
        const useStagedChanges = await hasStagedChanges(path);
        const staged = useStagedChanges ? '--staged' : '';
        return git(`git diff --stat ${staged}`, path);
    }
    async gitSampledDiffs(path) {
        const useStagedChanges = await hasStagedChanges(path);
        const numStatList = await getNumStat(path, useStagedChanges);
        const topFiles = numStatList
            .sort((a, b) => (b.added + b.removed) - (a.added + a.removed))
            .slice(0, MAX_DIFF_FILES);
        const diffs = await Promise.all(topFiles.map(async ({ file }) => ({ file, diff: await getSampledDiff(file, path, useStagedChanges) })));
        return diffs.map(({ file, diff }) => `==== ${file} ====\n${diff}`).join('\n\n');
    }
    gitBranch(path) {
        return git('git branch --show-current', path);
    }
    gitLog(path) {
        return git('git log --pretty=format:"%h|%s|%ad" --date=short --no-merges -n 5', path);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidm9pZFNDTU1haW5TZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6ImZpbGU6Ly8vaG9tZS9kYXJ0aHZhZGVyL0FJTmF0aXZlU3R1ZGlvLUlERS9haW5hdGl2ZS1zdHVkaW8vc3JjLyIsInNvdXJjZXMiOlsidnMvd29ya2JlbmNoL2NvbnRyaWIvdm9pZC9lbGVjdHJvbi1tYWluL3ZvaWRTQ01NYWluU2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OzBGQUcwRjtBQUUxRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFBO0FBQ2hDLE9BQU8sRUFBRSxJQUFJLElBQUksS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBUzdDLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUU3Qix5RkFBeUY7QUFDekYsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFBO0FBQzVCLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQTtBQUV6QixNQUFNLEdBQUcsR0FBRyxLQUFLLEVBQUUsT0FBZSxFQUFFLElBQVksRUFBbUIsRUFBRTtJQUNwRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsT0FBTyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUNsRSxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN4QixDQUFDO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7QUFDckIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUFFLElBQVksRUFBRSxnQkFBeUIsRUFBc0IsRUFBRTtJQUN4RixNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7SUFDakQsTUFBTSxNQUFNLEdBQUcsTUFB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