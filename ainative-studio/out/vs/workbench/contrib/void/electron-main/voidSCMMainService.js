/*--------------------------------------------------------------------------------------
 *  Copyright 2025 Glass Devtools, Inc. All rights reserved.
 *  Licensed under the Apache License, Version 2.0. See LICENSE.txt for more information.
 *--------------------------------------------------------------------------------------*/
import { promisify } from 'util';
import { exec as _exec } from 'child_process';
const exec = promisify(_exec);
//8000 and 10 were chosen after some experimentation on small-to-moderately sized changes
const MAX_DIFF_LENGTH = 8000;
const MAX_DIFF_FILES = 10;
const git = async (command, path) => {
    const { stdout, stderr } = await exec(`${command}`, { cwd: path });
    if (stderr) {
        throw new Error(stderr);
    }
    return stdout.trim();
};
const getNumStat = async (path, useStagedChanges) => {
    const staged = useStagedChanges ? '--staged' : '';
    const output = await git(`git diff --numstat ${staged}`, path);
    return output
        .split('\n')
        .map((line) => {
        const [added, removed, file] = line.split('\t');
        return {
            file,
            added: parseInt(added, 10) || 0,
            removed: parseInt(removed, 10) || 0,
        };
    });
};
const getSampledDiff = async (file, path, useStagedChanges) => {
    const staged = useStagedChanges ? '--staged' : '';
    const diff = await git(`git diff --unified=0 --no-color ${staged} -- "${file}"`, path);
    return diff.slice(0, MAX_DIFF_LENGTH);
};
const hasStagedChanges = async (path) => {
    const output = await git('git diff --staged --name-only', path);
    return output.length > 0;
};
export class VoidSCMService {
    async gitStat(path) {
        const useStagedChanges = await hasStagedChanges(path);
        const staged = useStagedChanges ? '--staged' : '';
        return git(`git diff --stat ${staged}`, path);
    }
    async gitSampledDiffs(path) {
        const useStagedChanges = await hasStagedChanges(path);
        const numStatList = await getNumStat(path, useStagedChanges);
        const topFiles = numStatList
            .sort((a, b) => (b.added + b.removed) - (a.added + a.removed))
            .slice(0, MAX_DIFF_FILES);
        const diffs = await Promise.all(topFiles.map(async ({ file }) => ({ file, diff: await getSampledDiff(file, path, useStagedChanges) })));
        return diffs.map(({ file, diff }) => `==== ${file} ====\n${diff}`).join('\n\n');
    }
    gitBranch(path) {
        return git('git branch --show-current', path);
    }
    gitLog(path) {
        return git('git log --pretty=format:"%h|%s|%ad" --date=short --no-merges -n 5', path);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidm9pZFNDTU1haW5TZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6ImZpbGU6Ly8vaG9tZS9kYXJ0aHZhZGVyL3Rlc3QvQUlOYXRpdmVTdHVkaW8tSURFL2FpbmF0aXZlLXN0dWRpby9zcmMvIiwic291cmNlcyI6WyJ2cy93b3JrYmVuY2gvY29udHJpYi92b2lkL2VsZWN0cm9uLW1haW4vdm9pZFNDTU1haW5TZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7MEZBRzBGO0FBRTFGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUE7QUFDaEMsT0FBTyxFQUFFLElBQUksSUFBSSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFTN0MsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBRTdCLHlGQUF5RjtBQUN6RixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUE7QUFDNUIsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFBO0FBRXpCLE1BQU0sR0FBRyxHQUFHLEtBQUssRUFBRSxPQUFlLEVBQUUsSUFBWSxFQUFtQixFQUFFO0lBQ3BFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxPQUFPLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQ2xFLElBQUksTUFBTSxFQUFFLENBQUM7UUFDWixNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3hCLENBQUM7SUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtBQUNyQixDQUFDLENBQUE7QUFFRCxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsSUFBWSxFQUFFLGdCQUF5QixFQUFzQixFQUFFO0lBQ3hGLE1BQU0sTUFBTSxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtJQUNqRCxNQUFNLE1BQU0sR0FB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