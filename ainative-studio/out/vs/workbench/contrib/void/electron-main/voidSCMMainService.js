/*--------------------------------------------------------------------------------------
 *  Copyright 2025 AINative Studio All rights reserved.
 *  Licensed under the Apache License, Version 2.0. See LICENSE.txt for more information.
 *--------------------------------------------------------------------------------------*/
import { promisify } from 'util';
import { exec as _exec } from 'child_process';
const exec = promisify(_exec);
//8000 and 10 were chosen after some experimentation on small-to-moderately sized changes
const MAX_DIFF_LENGTH = 8000;
const MAX_DIFF_FILES = 10;
const git = async (command, path) => {
    const { stdout, stderr } = await exec(`${command}`, { cwd: path });
    if (stderr) {
        throw new Error(stderr);
    }
    return stdout.trim();
};
const getNumStat = async (path, useStagedChanges) => {
    const staged = useStagedChanges ? '--staged' : '';
    const output = await git(`git diff --numstat ${staged}`, path);
    return output
        .split('\n')
        .map((line) => {
        const [added, removed, file] = line.split('\t');
        return {
            file,
            added: parseInt(added, 10) || 0,
            removed: parseInt(removed, 10) || 0,
        };
    });
};
const getSampledDiff = async (file, path, useStagedChanges) => {
    const staged = useStagedChanges ? '--staged' : '';
    const diff = await git(`git diff --unified=0 --no-color ${staged} -- "${file}"`, path);
    return diff.slice(0, MAX_DIFF_LENGTH);
};
const hasStagedChanges = async (path) => {
    const output = await git('git diff --staged --name-only', path);
    return output.length > 0;
};
export class VoidSCMService {
    async gitStat(path) {
        const useStagedChanges = await hasStagedChanges(path);
        const staged = useStagedChanges ? '--staged' : '';
        return git(`git diff --stat ${staged}`, path);
    }
    async gitSampledDiffs(path) {
        const useStagedChanges = await hasStagedChanges(path);
        const numStatList = await getNumStat(path, useStagedChanges);
        const topFiles = numStatList
            .sort((a, b) => (b.added + b.removed) - (a.added + a.removed))
            .slice(0, MAX_DIFF_FILES);
        const diffs = await Promise.all(topFiles.map(async ({ file }) => ({ file, diff: await getSampledDiff(file, path, useStagedChanges) })));
        return diffs.map(({ file, diff }) => `==== ${file} ====\n${diff}`).join('\n\n');
    }
    gitBranch(path) {
        return git('git branch --show-current', path);
    }
    gitLog(path) {
        return git('git log --pretty=format:"%h|%s|%ad" --date=short --no-merges -n 5', path);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidm9pZFNDTU1haW5TZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6ImZpbGU6Ly8vaG9tZS9vcGV6X2FtaWx5Xy9BSU5hdGl2ZVN0dWRpby1JREUvYWluYXRpdmUtc3R1ZGlvL3NyYy8iLCJzb3VyY2VzIjpbInZzL3dvcmtiZW5jaC9jb250cmliL3ZvaWQvZWxlY3Ryb24tbWFpbi92b2lkU0NNTWFpblNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OzswRkFHMEY7QUFFMUYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUNoQyxPQUFPLEVBQUUsSUFBSSxJQUFJLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQVM3QyxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7QUFFN0IseUZBQXlGO0FBQ3pGLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQTtBQUM1QixNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUE7QUFFekIsTUFBTSxHQUFHLEdBQUcsS0FBSyxFQUFFLE9BQWUsRUFBRSxJQUFZLEVBQW1CLEVBQUU7SUFDcEUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLE9BQU8sRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDbEUsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDeEIsQ0FBQztJQUNELE9BQU8sTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO0FBQ3JCLENBQUMsQ0FBQTtBQUVELE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxJQUFZLEVBQUUsZ0JBQXlCLEVBQXNCLEVBQUU7SUFDeEYsTUFBTSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0lBQ2pELE1BQU0sTUFBTSxHQUFHLE1B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